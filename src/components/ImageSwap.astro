---
// ImageSwap.astro
interface Props {
  images: {
    atuin: string;
    bottom: string;
    bandwhich: string;
  };
}

const { images } = Astro.props;
---

<div class="image-swap-container flex justify-center">
  <!-- Add padding-bottom to parent instead of spacer div -->
  <div class="flex gap-10 items-start relative pb-[100px]">
    <!-- Scrollable text content -->
    <div class="max-w-[400px] space-y-[25vh]">
      <div data-image="atuin" class="pt-[100px] scroll-section">
        <p class="font-bold dark:text-white text-4xl">atuin</p>
        <p class="text-lg mb-4">Making your shell magical</p>
        <p>Sync, search and backup shell history with Atuin. What started as shell history tooling has evolved into something bigger with Atuin Desktop</p>
      </div>
      
      <div data-image="bottom" class="scroll-section">
        <p class="font-bold dark:text-white text-4xl">bottom</p>
        <p class="text-lg mb-4">System resource monitor</p>
        <p>A customizable cross-platform graphical process/system monitor for the terminal. Supports Linux, macOS, and Windows</p>
      </div>
      
      <div data-image="bandwhich" class="scroll-section pb-24">
        <p class="font-bold dark:text-white text-4xl">bandwhich</p>
        <p class="text-lg mb-4">Network bandwidth monitor</p>
        <p>Terminal bandwidth utilization tool that displays network activity by process, connection and remote IP/hostname</p>
      </div>
    </div>
    
    <!-- Sticky image container -->
    <div class="sticky top-[100px] self-start w-[1080px]">
      <img 
        id="feature-image" 
        src={images.atuin} 
        alt="Feature showcase"
        class="w-full h-full object-contain transition-opacity duration-500 ease-out"
      />
    </div>
  </div>
</div>

<div id="image-data" 
     data-atuin={images.atuin} 
     data-bottom={images.bottom} 
     data-bandwhich={images.bandwhich}
     style="display: none;">
</div>

<script>
  function initImageSwap() {
    const imageData = document.getElementById('image-data');
    if (!imageData) return;

    const imageMap = {
      atuin: imageData.dataset.atuin || '',
      bottom: imageData.dataset.bottom || '',
      bandwhich: imageData.dataset.bandwhich || ''
    };

    const sections = document.querySelectorAll('.scroll-section');
    const featureImage = document.getElementById('feature-image') as HTMLImageElement;

    if (!featureImage || sections.length === 0) return;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const imageName = entry.target.getAttribute('data-image');
            
            if (imageName && imageName in imageMap) {
              const newSrc = imageMap[imageName as keyof typeof imageMap];
              
              featureImage.style.opacity = '0';
              
              setTimeout(() => {
                featureImage.src = newSrc;
                featureImage.style.opacity = '1';
              }, 250);
            }
          }
        });
      },
      {
        threshold: 0.5,
        rootMargin: '-20% 0px'
      }
    );

    sections.forEach(section => observer.observe(section));
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initImageSwap);
  } else {
    initImageSwap();
  }

  document.addEventListener('astro:page-load', initImageSwap);
</script>

<style>
  .scroll-section {
    min-height: 50vh;
    scroll-margin-top: 100px;
  }

  #feature-image {
    transition: opacity 0.5s ease-out;
  }
</style>

